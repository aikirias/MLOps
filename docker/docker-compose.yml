version: "3.9"

x-airflow-common: &airflow-common
  build: ./airflow
  env_file:
    - ../.env
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "True"
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${AIRFLOW_DB}
    AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    AIRFLOW_CONN_MLFLOW_DEFAULT: http://mlflow:${MLFLOW_PORT}
    MLFLOW_TRACKING_URI: http://mlflow:${MLFLOW_PORT}
    MLFLOW_S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
    AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    POSTGRES_HOST: postgres
    POSTGRES_PORT: "5432"
    POSTGRES_DB: ${POSTGRES_DB}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    PYTHONPATH: /opt/airflow:/opt/airflow/dags:/opt/airflow/ml
    SPARK_MASTER_URL: ${SPARK_MASTER_URL}
    PYSPARK_PYTHON: python3
    PYSPARK_DRIVER_PYTHON: python3
  volumes:
    - ../airflow/dags:/opt/airflow/dags
    - ../airflow/include:/opt/airflow/include
    - ../ml:/opt/airflow/ml
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    postgres:
      condition: service_healthy
    minio:
      condition: service_started
    spark-master:
      condition: service_started

services:
  postgres:
    image: postgres:15
    container_name: mp-churn-postgres
    env_file:
      - ../.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docker/postgres/init:/docker-entrypoint-initdb.d
      - ../ACTIVE_USER.csv:/data/ACTIVE_USER.csv:ro
      - ../DEMOGRAFICOS.csv:/data/DEMOGRAFICOS.csv:ro
      - ../DINERO_CUENTA.csv:/data/DINERO_CUENTA.csv:ro
      - ../EVALUATE.csv:/data/EVALUATE.csv:ro
      - ../MARKETPLACE_DATA.csv:/data/MARKETPLACE_DATA.csv:ro
      - ../PAYMENTS.csv:/data/PAYMENTS.csv:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-webserver:
    <<: *airflow-common
    container_name: mp-churn-airflow-web
    command: webserver
    ports:
      - "8080:8080"

  airflow-scheduler:
    <<: *airflow-common
    container_name: mp-churn-airflow-scheduler
    command: scheduler

  mlflow:
    build: ./mlflow
    container_name: mp-churn-mlflow
    env_file:
      - ../.env
    environment:
      BACKEND_STORE_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      DEFAULT_ARTIFACT_ROOT: s3://${MLFLOW_ARTIFACT_BUCKET}/
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      MLFLOW_S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    command: >
      mlflow server --backend-store-uri ${BACKEND_STORE_URI}
                   --default-artifact-root ${DEFAULT_ARTIFACT_ROOT}
                   --host 0.0.0.0 --port 5000
    ports:
      - "${MLFLOW_PORT}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started

  minio:
    image: minio/minio:latest
    container_name: mp-churn-minio
    env_file:
      - ../.env
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"

  minio-create-bucket:
    image: minio/mc:latest
    container_name: mp-churn-minio-create-bucket
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}; \
                 mc mb -p minio/${MLFLOW_ARTIFACT_BUCKET} || true; \
                 exit 0"

  spark-master:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile
    container_name: mp-churn-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLE=no
      - SPARK_RPC_ENCRYPTION_ENABLE=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLE=no
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
    ports:
      - "7077:7077"
      - "8081:8080"

  spark-worker:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile
    container_name: mp-churn-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=${SPARK_MASTER_URL}
      - SPARK_RPC_AUTHENTICATION_ENABLE=no
      - SPARK_RPC_ENCRYPTION_ENABLE=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLE=no
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
    depends_on:
      spark-master:
        condition: service_started

  jupyter:
    image: jupyter/minimal-notebook:python-3.10
    container_name: mp-churn-jupyter
    env_file:
      - ../.env
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      PGHOST: postgres
      PGPORT: "5432"
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      MLFLOW_TRACKING_URI: http://mlflow:${MLFLOW_PORT}
      MLFLOW_S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ../:/home/jovyan/work
    ports:
      - "${JUPYTER_PORT}:8888"
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
      minio:
        condition: service_started

  streamlit:
    build:
      context: ..
      dockerfile: docker/streamlit/Dockerfile
    container_name: mp-churn-streamlit
    env_file:
      - ../.env
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:${MLFLOW_PORT}
      MLFLOW_S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ../app:/app
    ports:
      - "8601:8501"
    depends_on:
      mlflow:
        condition: service_started
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  airflow_logs:
  airflow_plugins:
  minio_data:
